(dp1
S'output'
p2
S"<type 'exceptions.KeyError'> 'constraints'"
p3
sS'layer'
p4
S'/media/Windows/Users/Tushar/Education/IIIT/4th_Year/1st_Sem/BTP/Project/web2py/applications/photo_uploader/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\ndef index():\n    images = db().select(db.image.ALL, orderby=db.image.title)\n    return dict(images=images)\n    \n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n    \ndef admin():\n    grid = None\n    if auth.user.email==\'eskiranmai94@gmail.com\':\n        grid=SQLFORM.smartgrid(db.image)\n    else:\n        query = db.image.User==auth.user.id\n        constraints = {\'image\':query}\n        grid=SQLFORM.smartgrid(db.image.constraints)\n    return dict(grid=grid)\n\ndef profile():\n    return dict(form=auth.profile())\n\ndef register():\n    return dict(form=auth.register())\n\ndef login():\n    return dict(form=auth.login())\n\ndef resetpass():\n    return dict(form=auth.request_reset_password())\n\ndef upload():\n    db.image.User.default=auth.user.first_name\n    form=SQLFORM(db.image)\n    name="Photo Gallery"\n    if form.accepts(request.vars,session):\n        redirect(URL(r=request,f=\'index\'))\n        session.flash=T("Upload successful")\n    else:\n       session.flash=T(\'Form has errors\')    \n    return dict(form=form,name=name)\n\n        \n@auth.requires_login()       \ndef show():\n    db.image.User.default=auth.user.first_name\n    image = db.image(request.args(0)) or redirect(URL(\'index\'))\n    db.comment.image_id.default = image.id\n    form1 = SQLFORM(db.comment,submit_button=T(\'Submit\'))\n    if form1.process().accepted:\n        response.flash = \'your comment is posted\'\n    comments = db(db.comment.image_id==image.id).select()\n    \n    db.Likes.image_id.default = image.id\n    form2 = SQLFORM(db.Likes,submit_button=T(\'Like\'))\n    if form2.process().accepted:\n        response.flash = \'Liked!!\'\n    likes = db(db.Likes.image_id==image.id).select()\n    return dict(image=image, comments=comments, form1=form1, form2=form2,likes=likes)\n\ndef delete():\n    a=db.image(request.args(0)) or redirect(URL(\'index\'))\n    form3=crud.delete(db.image, a.id)\n    return dict(form3=form3)\n\nresponse._vars=response._caller(admin)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/media/Windows/Users/Tushar/Education/IIIT/4th_Year/1st_Sem/BTP/Project/web2py/gluon/restricted.py", line 205, in restricted\n    exec ccode in environment\n  File "/media/Windows/Users/Tushar/Education/IIIT/4th_Year/1st_Sem/BTP/Project/web2py/applications/photo_uploader/controllers/default.py", line 125, in <module>\n  File "/media/Windows/Users/Tushar/Education/IIIT/4th_Year/1st_Sem/BTP/Project/web2py/gluon/globals.py", line 173, in <lambda>\n    self._caller = lambda f: f()\n  File "/media/Windows/Users/Tushar/Education/IIIT/4th_Year/1st_Sem/BTP/Project/web2py/applications/photo_uploader/controllers/default.py", line 76, in admin\n    grid=SQLFORM.smartgrid(db.image.constraints)\n  File "/media/Windows/Users/Tushar/Education/IIIT/4th_Year/1st_Sem/BTP/Project/web2py/gluon/dal.py", line 6774, in __getattr__\n    return self[key]\n  File "/media/Windows/Users/Tushar/Education/IIIT/4th_Year/1st_Sem/BTP/Project/web2py/gluon/dal.py", line 6714, in __getitem__\n    return dict.__getitem__(self, str(key))\nKeyError: \'constraints\'\n'
p11
s.